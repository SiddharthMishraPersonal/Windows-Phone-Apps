using System;
using System.Windows;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using channel_connect.Data.DataSchemas;
using Microsoft.WindowsAzure.MobileServices;

namespace channel_connect.Data
{
    public class TransactionsDataSource : DataSourceBase<PartnerTransactions>
    {
        public static Microsoft.WindowsAzure.MobileServices.MobileServiceClient channel_connectClient = new Microsoft.WindowsAzure.MobileServices.MobileServiceClient(
    "https://channel-connect.azure-mobile.net/",
    "mgDihocRysIbjqVRHNOBOpIMSnknlT45");

        private MobileServiceCollection<PartnerTransactions, PartnerTransactions> _transactionses;
        private IMobileServiceTable<PartnerTransactions> _transactionServiceTable = channel_connectClient.GetTable<PartnerTransactions>();
        private IMobileServiceTable<ProgramMaster> _programMasterTable = channel_connectClient.GetTable<ProgramMaster>();
        private IMobileServiceTable<ProductMaster> _productMasterTable = channel_connectClient.GetTable<ProductMaster>();

        private const string _appId = "0371a008-9a6c-4f3f-b3d5-3e818dcd181e";
        private const string _dataSourceName = "6a5df094-7149-4082-a9eb-4d9389b05047";

        protected override string CacheKey
        {
            get { return "TransactionsDataSource"; }
        }

        public override bool HasStaticData
        {
            get { return false; }
        }

        public async override Task<IEnumerable<PartnerTransactions>> LoadDataAsync()
        {
            try
            {
                //var programMasterTable = channel_connectClient.GetTable<ProgramMaster>();
                //var programMasterList = programMasterTable.ToCollectionAsync();
                //var productMasterTable = channel_connectClient.GetTable<ProductMaster>();
                //var productMasterList = productMasterTable.ToCollectionAsync().Result;

                var productList = await _productMasterTable.ToCollectionAsync();
                var programList = await _programMasterTable.ToCollectionAsync();

                var transactionList = await _transactionServiceTable.ToCollectionAsync();

                foreach (var partnerTransactionse in transactionList)
                {
                    var program = programList.FirstOrDefault(s => s.Id.Equals(partnerTransactionse.IncentiveProgramId));
                    var product = productList.FirstOrDefault(s => s.Id.Equals(partnerTransactionse.ProductId));

                    partnerTransactionse.ProgramMaster = program;
                    partnerTransactionse.ProductMaster = product;
                }

                return transactionList;

                var serviceDataProvider = new ServiceDataProvider(_appId, _dataSourceName);
                return await serviceDataProvider.Load<PartnerTransactions>();
            }
            catch (Exception ex)
            {
                AppLogs.WriteError("TransactionsDataSource.LoadData", ex.ToString());
                return new PartnerTransactions[0];
            }
        }
    }
}
